/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("ydjs.java-library-conventions")
}

dependencies {
    api(project(":list"))
}



/*
 * [Custom] Gradle tasks.
 */
tasks.register("setClass") {
    // Define file paths for Java and test files
    val javaFiles = listOf(
        "src/main/java/com/example/MyClass1.java",
        "src/main/java/com/example/MyClass2.java",
        "src/main/java/com/example/AnotherClass.java"
    )

    doLast {
        javaFiles.forEach { path ->
            val javaFile = file(path)
            val packageName = javaFile.parentFile
                .relativeTo(file("src/main/java"))
                .path
                .replace(File.separator, ".")
            val className = javaFile.nameWithoutExtension

            // Create Java file if it doesn't exist
            if (!javaFile.exists()) {
                createJavaFile(javaFile, packageName, className)
            }

            // Create test file if it doesn't exist
            val testFile = getTestFile(javaFile)
            if (!testFile.exists()) {
                createTestFile(testFile, packageName, className)
            }
        }
    }
}

fun createJavaFile(javaFile: File, packageName: String, className: String) {
    javaFile.parentFile.mkdirs() // Create directories if needed
    javaFile.writeText("""
        package $packageName;

        public class $className {
            public static void main(String[] args) {
                System.out.println("Hello, $className!");
            }
        }
    """.trimIndent())
    println("Created: $javaFile")
}

fun getTestFile(javaFile: File): File {
    val testFilePath = "src/test/java/${javaFile.parentFile
        .relativeTo(file("src/main/java"))
        .path
        .replace(File.separator, "/")}/Test${javaFile.nameWithoutExtension}Test.java"
    return file(testFilePath)
}

fun createTestFile(testFile: File, packageName: String, className: String) {
    testFile.parentFile.mkdirs() // Create directories if needed
    testFile.writeText("""
        package $packageName;

        import org.junit.jupiter.api.Test;

        import static org.junit.jupiter.api.Assertions.*;

        public class Test${className}Test {
            @Test
            public void testMainMethod() {
                String expectedOutput = "Hello, $className!";
                assertEquals(expectedOutput, "Hello, $className!");
            }
        }
    """.trimIndent())
    println("Created test file: $testFile")
}
